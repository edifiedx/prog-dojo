const knapsack2n = (max, items) =>
{
    let best = 0;
    
    for (var i = 0; i < Math.pow(2, items.length); i++)
    {
        let bitwise = i.toString(2).padStart(items.length, 0);
        let value = 0;
        let weight = 0;
        for (var c = 0; c < bitwise.length; c++)
        {
            if (bitwise[c] == 1)
            {
                value += items[c][1];
                weight += items[c][0];
            }
        }
        if (weight <= max)
        {
            best = Math.max(best, value);
            //console.log(`${bitwise} : ${weight}, ${value}`);
        }
    }
    return best;
}
// weight, value
// console.log(knapsack2n(4, [[3,1.8],[2,1],[2,1.1]]));
// console.log(knapsack2n(7, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));
console.log(knapsack2n(86, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));
console.log(knapsack2n(93, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));
console.log(knapsack2n(112, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));
console.log(knapsack2n(150, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));
console.log(knapsack2n(247, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));
console.log(knapsack2n(248, [[12,40],[5,20],[14,45],[8,30],[3,30 ],[5,15],[6,16],[21,31],[22,32],[9,19],[10,20],[1,11],[2,12],[3,13],[4,14],[20,30],[11,21],[12,22],[7,17],[8,18],[13,23],[14,24],[15,25],[23,33]]));


// Max = 7 => Solution = 54
// Max = 86 => Solution = 289
// Max = 93 => Solution = 306
// Max = 112 => Solution = 345
// Max = 150 => Solution = 413
// Max = 247 => Solution = 550
// Max = 248 => Solution = 561

